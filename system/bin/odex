#!/system/bin/sh
#
########################################
# NukaTool: Odexer Script              #
# Created By MatrixDJ96                #
# Last Update: 12-07-2013 (MM-dd-yyyy) #
# Language: English                    #
#									   #
# Some slight customisation by Kryten  #
# All rights held by MatrixDJ96        #
########################################
#
# Enjoy! :-)

bb=/system/xbin/busybox
tb=toolbox
lw=logwrapper
dnt=/sdcard/UltimaROM
if $bb [ ! -d $dnt ]
then
	$bb mkdir $dnt
fi
ots=$dnt/settings.txt
sad=$dnt/system_apps_deodexed.txt
nt=$dnt/nothing.txt
nt2=$dnt/nothing2.txt
ddd=/cache/dalvik-cache
ddd2=/data/dalvik-cache
dsa=/system/app
dsf=/system/framework
tmp=/data/odex
if $bb [ ! -d $tmp ]
then
	$bb mkdir $tmp
fi

nukatool_version() {
$bb echo "Odexer Script 1.1.1"
$bb echo "For All Rom & Device"
$bb echo ""
$bb echo "Go to my webpage on xda to see more info"
$bb echo "http://forum.xda-developers.com/showthread.php?t=2527268"
$bb echo ""
$bb echo "MatrixDJ96 - XDA Senior Member"
$bb echo ""
}

system_info() {
product_model=`$bb grep "ro.product.model" /system/build.prop | $bb sed 's:ro.product.model=::g'`
android_version=`$bb grep "ro.build.version.release=" /system/build.prop | $bb sed 's:ro.build.version.release=::g'`
if $bb [ `$bb grep "ro.build.version.release=2.2" /system/build.prop` ]
then
	name=Froyo
elif $bb [ `$bb grep "ro.build.version.release=2.3" /system/build.prop` ]
then
	name=Gingerbread
elif $bb [ `$bb grep "ro.build.version.release=3.0" /system/build.prop` ]
then
	name=Honeycomb
elif $bb [ `$bb grep "ro.build.version.release=4.0" /system/build.prop` ]
then
	name="Ice Cream Sandwich"
elif $bb [ `$bb grep "ro.build.version.release=4.1" /system/build.prop` ] || $bb [ `$bb grep "ro.build.version.release=4.2" /system/build.prop` ] || $bb [ `$bb grep "ro.build.version.release=4.3" /system/build.prop` ]
then
	name="Jelly Bean"
elif $bb [ `$bb grep "ro.build.version.release=4.4" /system/build.prop` ]
then
	name=KitKat
	spad=/sdcard/NukaTool/system_priv-apps_deodexed.txt
	dspa=/system/priv-app
fi
$bb echo "Product Model: $product_model"
$bb echo "Android Version: $android_version ($name)"
$bb echo ""
}

system_status() {
if $bb [ ! -z $BOOTCLASSPATH ]
then
	bcp=`$bb echo $BOOTCLASSPATH \
		| $bb sed 's:/system/framework/::g' \
		| $bb sed 's/:/ /g'`
else
	$bb echo "BOOTCLASSPATH Not Setted..."
	$bb echo ""
	exit 1
fi
cd $dsf
if $bb [ ! -f framework.odex ]
then
	$bb unzip -l framework.jar | $bb grep -q preload-classes
	if $bb [[ "$?" == "1" ]]
	then
		$bb echo "Framework is: Deodexed"
		frameodex=0
	else
		$bb echo "Your rom can't be odexed..."
		$bb echo "Please fix your framework before"
		$bb echo ""
		exit 1
	fi
else
	$bb echo "Framework is: Odexed"
	frameodex=1
fi
cd $dsa
$bb echo -n "System apps are: "
$bb ls | $bb grep -q ".odex"
if $bb [[ "$?" == "0" ]]
then
	if $bb [ -f $sad ]
	then
		$bb rm -f $sad
	fi
	if $bb [ -f $nt ]
	then
		$bb rm -f $nt
	fi
	for sa in *.apk
	do
		if $bb [[ "$sa" == "DeluxeSettings.apk" ]] || $bb [[ "$sa" == "RootExplorer.apk" ]]
		then
			$bb echo -n "$sa " >> $nt
		else
			sao=`$bb echo $sa | $bb sed 's:.apk:.odex:g'`
			if $bb [ ! -f $sao ]
			then
				$bb unzip -l $sa | $bb grep -q classes.dex
				if $bb [[ "$?" == "0" ]]
				then
					$bb echo -n "$sa " >> $sad
				fi
			fi
		fi
	done
	if $bb [ -f $sad ]
	then
		$bb echo "Partial odexed"
		sysappodex=2
	else
		$bb echo "Odexed"
		sysappodex=1
	fi
else
	 $bb echo "Deodexed"
	 sysappodex=0
fi
if $bb [[ "$name" == "KitKat" ]]
then
	cd $dspa
	$bb echo -n "System priv-apps Are: "
	$bb ls | $bb grep -q ".odex"
	if $bb [[ "$?" == "0" ]]
	then
		if $bb [ -f $spad ]
		then
			$bb rm -f $spad
		fi
		if $bb [ -f $nt2 ]
		then
			$bb rm -f $nt2
		fi
		for spa in *.apk
		do
			if $bb [[ "$spa" == "DeluxeSettings.apk" ]] || $bb [[ "$spa" == "RootExplorer.apk" ]]
			then
				$echo -n "$spa " >> $nt2
			else
				spao=`$bb echo $spa | $bb sed 's:.apk:.odex:g'`
				if $bb [ ! -f $spao ]
				then
					$bb unzip -l $spa | $bb grep -q classes.dex
					if $bb [[ "$?" == "0" ]]
					then
						$bb echo -n "$spa " >> $spad
					fi
				fi
			fi
		done
		if $bb [ -f $spad ]
		then
			$bb echo "Partial odexed"
			sysappodex=2
		else
			$bb echo "Odexed"
		fi
	else
		 $bb echo "Deodexed"
		 if $bb [[ "$sysappodex" == "1" ]]
		 then
			 sysappodex=2
		 fi
	fi
fi
$bb echo ""
fss=`$bb df -Pm /system | $bb tail -n 1 | $bb awk '{print $4}'`
$bb echo "System Free Space: $fss Mb"
}

settings() {
if $bb [[ "$name" != "KitKat" ]]
then
	if $bb [ ! -f $ots ]
	then
		$bb echo "0" >> $ots
	fi
	$bb echo ""
	$bb echo -n "Remote classes.dex & Zipalign: "
	if $bb [ `$bb grep "0" $ots` ]
	then
		$bb echo "Disabled"
		uos=0
	else
		$bb echo "Enabled"
		uos=1
	fi
fi
}

change_settings() {
$bb echo ""
if $bb [[ "$uos" == "0" ]]
then
	$bb echo "(1) Enable 'Remove classes.dex & Zipalign'"
	$bb echo "(2) Back"
else
	$bb echo "(1) Disable 'Remove classes.dex & Zipalign'"
	$bb echo "(2) Back"
fi
$bb echo ""
$bb echo -n "=> "
read option
if $bb [[ "$option" == "1" ]]
then
	if $bb [[ "$uos" == "0" ]]
	then
		$bb echo "1" > $ots
		uos=1
		settings
		answer
	else
		$bb echo "0" > $ots
		uos=0
		settings
		answer
	fi
elif $bb [[ "$option" == "2" ]]
then
	settings
	answer
else
	$bb echo ""
	$bb echo "Unknow command! Type 1 or 2"
	$bb sleep 1
	change_settings
fi
}

update() {
if $bb [[ "$uos" == "1" ]]
then
	bb2=/tmp/busybox
	dntsm=/system/NukaTool/META-INF
	dntu=$dnt/Update
	dntun=$dntu/NukaTool
	script=$dntun/script.sh
	dntus=$dntu/system
	dssf=$dntus/framework
	dssa=$dntus/app
	if $bb [ -d $dntu ]
	then
		$bb rm -f -r $dntu
		$bb mkdir $dntu
		$bb mkdir $dntun
		$bb mkdir $dntus
		$bb mkdir $dssf
		$bb mkdir $dssa
	else
		$bb mkdir $dntu
		$bb mkdir $dntun
		$bb mkdir $dntus
		$bb mkdir $dssf
		$bb mkdir $dssa
	fi
	if $bb [[ "$name" == "KitKat" ]]
	then
		dsspa=/sdcard/NukaTool/Update/system/priv-app
		if $bb [ ! -d $dsspa ]
		then
			$bb mkdir $dsspa
		fi
	fi
	$bb cp -f -r $dntsm $dntu
	$bb cp -f $bb $dntun
	$bb echo "#!/system/bin/sh" > $script
	$bb echo "" >> $script
fi
}

mount_rw() {
$lw $bb mount -o remount, rw /system
$lw $bb mount -o rw,remount /system
$lw $tb mount -o remount, rw /system
$lw $tb mount -o rw,remount /system
}

frame() {
cd $dsf
for core in $bcp *.jar
do
	coreodex=`$bb echo $core | $bb sed -e 's:.jar:.odex:g'`
	if $bb [ ! -f $coreodex ]
	then
		$bb unzip -l $core | $bb grep -q classes.dex
		if $bb [[ "$?" == "0" ]]
		then
			$bb echo "Odexing $core..."
			dexopt-wrapper $core $coreodex $BOOTCLASSPATH > /dev/null 2>&1
			if $bb [[ "$?" == "0" ]]
			then
				if $bb [[ "$uos" == "1" ]]
				then
					$bb echo "Optimizing $core..."
					$bb cp -f $core $dssf/$core
					zip -q -d $dssf/$core classes.dex
					zipalign -f 4 $dssf/$core $dssf/$core.new
					$bb rm -f $dssf/$core
					$bb mv -f $dssf/$core.new $dssf/$core
					$bb echo "$bb2 rm -f $dsf/$core" >> $script
				fi
				$bb echo "Setting permission of $core..."
				$bb chmod 644 $core
				$bb echo "Setting permission of $coreodex..."
				$bb chmod 644 $coreodex
				$bb echo ""
			else
				$bb echo "Failed!"
				$bb rm -f $coreodex
				$bb sleep 1
				$bb echo ""
			fi
		fi
	fi
done
}

sysapp() {
cd $dsa
for sysapp in *.apk
do
	if $bb [[ "$sysapp" == "DeluxeSettings.apk" ]] || $bb [[ "$sysapp" == "RootExplorer.apk" ]]
	then
		$bb echo "Skipping $sysapp..."
		$bb echo ""
	else
		sysappodex=`$bb echo $sysapp | $bb sed -e 's:.apk:.odex:g'`
		if $bb [ ! -f $sysappodex ]
		then
			$bb unzip -l $sysapp | $bb grep -q classes.dex
			if $bb [[ "$?" == "0" ]]
			then
				$bb echo "Odexing $sysapp..."
				dexopt-wrapper $sysapp $sysappodex $BOOTCLASSPATH > /dev/null 2>&1
				if $bb [[ "$?" == "0" ]]
				then
					if $bb [[ "$uos" == "1" ]]
					then
						$bb echo "Optimizing $sysapp..."
						$bb cp -f $sysapp $dssa/$sysapp
						zip -q -d $dssa/$sysapp classes.dex
						zipalign -f 4 $dssa/$sysapp $dssa/$sysapp.new
						$bb rm -f $dssa/$sysapp
						$bb mv -f $dssa/$sysapp.new $dssa/$sysapp
						$bb echo "$bb2 rm -f $dsa/$sysapp" >> $script
					fi
					$bb echo "Setting permission of $sysapp..."
					$bb chmod 644 $sysapp
					$bb echo "Setting permission of $sysappodex..."
					$bb chmod 644 $sysappodex
					$bb echo ""
				else
					$bb echo "Failed!"
					$bb rm -f $sysappodex
					$bb sleep 1
					$bb echo ""
				fi
			fi
		fi
	fi
done
if $bb [[ "$name" == "KitKat" ]]
then
	cd $dspa
	for sysprivapp in *.apk
	do
		if $bb [[ "$sysprivapp" == "DeluxeSettings.apk" ]] || $bb [[ "$sysprivapp" == "RootExplorer.apk" ]]
		then
			$bb echo "Skipping $sysprivapp..."
			$bb echo ""
		else
			sysprivappodex=`$bb echo $sysprivapp | $bb sed -e 's:.apk:.odex:g'`
			if $bb [ ! -f $sysprivappodex ]
			then
				$bb unzip -l $sysprivapp | $bb grep -q classes.dex
				if $bb [[ "$?" == "0" ]]
				then
					$bb echo "Odexing $sysprivapp..."
					dexopt-wrapper $sysprivapp $sysprivappodex $BOOTCLASSPATH > /dev/null 2>&1
					if $bb [[ "$?" == "0" ]]
					then
						if $bb [[ "$uos" == "1" ]]
						then
							$bb echo "Optimizing $sysprivapp..."
							$bb cp -f $sysprivapp $dsspa/$sysprivapp
							zip -q -d $dsspa/$sysprivapp classes.dex
							zipalign -f 4 $dsspa/$sysprivapp $dsspa/$sysprivapp.new
							$bb rm -f $dsspa/$sysprivapp
							$bb mv -f $dsspa/$sysprivapp.new $dsspa/$sysprivapp
						$bb echo "$bb2 rm -f $dspa/$sysprivapp" >> $script
						fi
						$bb echo "Setting permission of $sysprivapp..."
						$bb chmod 644 $sysprivapp
						$bb echo "Setting permission of $sysprivappodex..."
						$bb chmod 644 $sysprivappodex
						$bb echo ""
					else
						$bb echo "Failed!"
						$bb rm -f $sysprivappodex
						$bb sleep 1
						$bb echo ""
					fi
				fi
			fi
		fi
	done
fi
}

zip_update() {
if $bb [[ "$uos" == "1" ]]
then
	$bb echo "Creating flashable zip in sdcard..."
	cd $dntu
	zip -q -r "Optimized-System_$product_model.zip" *
	if $bb [ -f /sdcard/"Optimized-System_$product_model.zip" ]
	then
		$bb rm -f /sdcard/"Optimized-System_$product_model.zip"
	fi
	$bb mv -f "Optimized-System_$product_model.zip" /sdcard
	$bb echo "Optimized-System_$product_model.zip created!"
	$bb echo "Reboot in recovery and flash it"
	$bb sleep 3
	$bb echo ""
fi
}

clear_reboot() {
$bb echo "Removing temp..."
$bb rm -f -r $tmp
$bb rm -f -r $dntu
$bb echo ""
$bb echo "Removing dalvik-cache..."
$lw $bb rm -f $ddd/*
$lw $bb rm -f $ddd2/*
$bb echo ""
if $bb [[ "$uos" == "0" ]]
then
	$bb echo "Hot-rebooting..."
	$bb sleep 2
	$bb killall system_server
	$bb echo ""
fi
exit 1
}

answer() {
$bb echo ""
$bb echo "Available command: "
$bb echo ""
if $bb [[ "$frameodex" == "0" ]]
then
	if $bb [[ "$sysappodex" == "0" ]]
	then
		$bb echo "Odex framework => frame"
	fi
fi
if $bb [[ "$sysappodex" == "0" ]] || $bb [[ "$sysappodex" == "2" ]]
then
	if [[ "$name" == "KitKat" ]]
	then
		$bb echo "Odex system apps & priv-apps => sysapp"
	else
		$bb echo "Odex system apps => sysapp"
	fi
fi
if $bb [[ "$frameodex" == "0" ]]
then
	if $bb [[ "$sysappodex" == "0" ]]
	then
		$bb echo "Odex all (frame-sysapp) => all"
	elif $bb [[ "$sysappodex" == "2" ]]
	then
		$bb echo "Odex all (sysapp) => all"
	fi
else
	if $bb [[ "$sysappodex" == "0" ]] || $bb [[ "$sysappodex" == "2" ]]
	then
		$bb echo "Odex all (sysapp) => all"
	fi
fi
if $bb [[ "$name" != "KitKat" ]]
then
	$bb echo "Change settings => set"
fi
$bb echo "Exit from the script => exit"
$bb echo ""
$bb echo -n "=> "
read command
if $bb [[ "$command" == "frame" ]]
then
	if $bb [[ "$frameodex" == "1" ]]
	then
		$bb echo ""
		$bb echo "Useless command for your rom..."
		$bb echo -n "Do you want to proceed anyway? (Y/N) "
		read frameyes
		if $bb [[ "$frameyes" == "Y" ]] || $bb [[ "$frameyes" == "y" ]] || $bb [[ "$sysappyes" == "Yes" ]] || $bb [[ "$sysappyes" == "yes" ]]
		then
			$bb echo ""
			mount_rw
			update
			frame
			zip_update
			clear_reboot
			exit 1
		else
			answer
		fi
	else
		if $bb [[ "$sysappodex" == "1" ]] || $bb [[ "$sysappodex" == "2" ]]
		then
			$bb echo ""
			$bb echo "Impossible odex framework"
			$bb echo "To odex it deodex system apps before"
			exit 1
		else
			$bb echo ""
			mount_rw
			update
			frame
			zip_update
			clear_reboot
			exit 1
		fi
	fi
elif $bb [[ "$command" == "sysapp" ]]
then
	if $bb [[ "$sysappodex" == "1" ]]
	then
		$bb echo ""
		$bb echo "Useless command for your rom..."
		$bb echo -n "Do you want to proceed anyway? (Y/N) "
		read sysappyes
		if $bb [[ "$sysappyes" == "Y" ]] || $bb [[ "$sysappyes" == "y" ]] || $bb [[ "$sysappyes" == "Yes" ]] || $bb [[ "$sysappyes" == "yes" ]]
		then
			$bb echo ""
			mount_rw
			update
			sysapp
			zip_update
			clear_reboot
			exit 1
		else
			answer
		fi
	else
		$bb echo ""
		mount_rw
		update
		sysapp
		zip_update
		clear_reboot
		exit 1
	fi
elif $bb [[ "$command" == "all" ]]
then
	if $bb [[ "$frameodex" == "0" ]]
	then
		if $bb [[ "$sysappodex" == "0" ]]
		then
			$bb echo ""
			mount_rw
			update
			frame
			sysapp
			zip_update
			clear_reboot
			exit 1
		elif $bb [[ "$sysappodex" == "2" ]]
		then
			$bb echo ""
			mount_rw
			update
			sysapp
			zip_update
			clear_reboot
			exit 1
		fi
	else
		if $bb [[ "$sysappodex" == "0" ]] || $bb [[ "$sysappodex" == "2" ]]
		then
			$bb echo ""
			mount_rw
			update
			sysapp
			zip_update
			clear_reboot
			exit 1
		else
			$bb echo ""
			$bb echo "Useless command for your Rom..."
			$bb echo -n "Do you want to proceed anyway? (Y/N) "
			read frasysyes
			if $bb [[ "$frasysyes" == "Y" ]] || $bb [[ "$frasysyes" == "y" ]] || $bb [[ "$frasysyes" == "Yes" ]] || $bb [[ "$frasysyes" == "yes" ]]
			then
				$bb echo ""
				mount_rw
				update
				frame
				sysapp
				zip_update
				clear_reboot
				exit 1
			else
				answer
			fi
		fi
	fi
elif $bb [[ "$command" == "set" ]]
then
	if $bb [[ "$name" != "KitKat" ]]
	then
		change_settings
	else
		$bb echo ""
		$bb echo "You can't change settings"
		$bb sleep 1
		answer
	fi
elif $bb [[ "$command" == "exit" ]]
then
	$bb echo ""
	exit 1
else
	$bb echo ""
	$bb echo "Unknow command!"
	$bb sleep 1
	answer
fi
}

if $bb [[ "${1}" == "" ]]
then
	nukatool_version
	system_info
	system_status
	settings
	answer
fi

#  _    _   _____  _______  ____       
# | \  / | |     |    |    |    |  |  \       /
# |  \/  | |_____|    |    |____|  |    \ _ /  
# |      | |     |    |    |   \   |    /   \  
# |      | |     |    |    |    \  |  /       \
