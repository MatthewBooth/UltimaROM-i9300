#!/system/bin/sh

VERSION=""
TEMP=""
NOZIP=0
NOW=$(date +"%m-%d-%Y")

if [ -d /storage/sdcard1/UltimaROM ]; then
	AD="/storage/sdcard1/UltimaROM"
elif [ -d /storage/extSdCard/UltimaROM ]; then
	AD="/storage/extSdCard/UltimaROM"
else
	AD="/data/media/0/UltimaROM"
fi
if [ -d $AD/GitHub ]; then
	MODE="git"
else
	MODE="direct"
fi

echo "Welcome to UltimaROM Command Line Flasher!"
echo "Detected UltimaROM in $AD"
echo "Checking access to $AD"
mkdir -p $AD/tmp
cd $AD/tmp && rm -f test && touch test && rm -f test
CHECK1=$?
if [ $CHECK1 -ne 0 ]; then
	echo "Sorry, access test failed. Make sure that $AD/tmp is not being owned by root or give me root access"
	exit 1
else
	echo "Access test passed, we're ready to go!"
fi

if [ $# -eq 0 ]; then
	echo "Usage: $0 <VERSION>"
	echo ""
	echo "Available versions:"
	echo "1e	Experimental"
	echo "1s	Stable"
	echo ""
	echo -n "Your choice: "
	read VERSION
	echo ""
	echo ""
	echo "You may specify any extra options here separated by a whitespace. Eventually you can just skip this question and apply defaults"
	echo ""
	echo "UltimaROM will prioritize git mode if UltimaROM github repository already exists on your device and eventually fall back to direct, you can override this here"
	echo "Currently using mode: $MODE. If you're satisfied with this mode you can just skip this question"
	echo "git			Sets up local git repository, which gives you delta upgrades and bandwidth saving"
	echo "direct		Downloads targeted branch as .zip file directly from github"
	echo "clean			Cleans everything up, including local repo and tmp folder from UltimaROM directory specified below"
	echo ""
	echo "UltimaROM will prioritize extsd if it contains UltimaROM folder and eventually fall back to intsd, you can override this here"
	echo "Currently using UltimaROM in: $AD. If you're satisfied with this path you can just skip this question"
	echo "extsd			Use external sd card (/storage/sdcard1 /storage/extSdCard)"
	echo "intsd			Use internal sd card (/data/media/0)"
	echo ""
	echo "Other selectable options"
	echo "nozip			Shows changelog and changes only"
	echo ""
	echo ""
	echo "Example: git extsd"
	echo -n "Your extra options: "
	read EXTRA
else
	VERSION="$1"
	EXTRA="$@"
fi

# Parse extra args
for arg in $EXTRA; do
	case "$arg" in
		"git")
			MODE="git"
			;;
		"direct")
			MODE="direct"
			;;
		"clean")
			MODE="clean"
			;;
		"nozip")
			NOZIP=1
			;;
		"intsd")
			if [ "$AD" != "/data/media/0/UltimaROM" ]; then
				echo "Changing path to internal sd!"
				AD="/data/media/0/UltimaROM"
				mkdir -p $AD/tmp
				cd $AD/tmp && rm -f test && touch test && rm -f test
				CHECK1=$?
				if [ $CHECK1 -ne 0 ]; then
					echo "Sorry, access test failed. Make sure that $AD/tmp is not being owned by root or give me root access"
					exit 1
				else
					echo "Access test passed, we're ready to go!"
				fi
			fi
			;;
		"extsd")
			if [ "$AD" == "/data/media/0/UltimaROM" ]; then
				echo "Changing path to external sd!"
				if [ -e /storage/sdcard1 ]; then
					AD="/storage/sdcard1/UltimaROM"
				elif [ -e /storage/extSdCard ]; then
					AD="/storage/extSdCard/UltimaROM"
				fi

				if [ "$AD" != "/data/media/0/UltimaROM" ]; then
					mkdir -p $AD/tmp
					cd $AD/tmp && rm -f test && touch test && rm -f test
					CHECK1=$?
					if [ $CHECK1 -ne 0 ]; then
						echo "Sorry, access test failed. Make sure that $AD/tmp is not being owned by root or give me root access"
						exit 1
					else
						echo "Access test passed, we're ready to go!"
					fi
				else
					echo "Sorry, could not detect any valid path to use"
					echo "You selected extsd, but I failed to use it so I'm aborting here"
					exit 1
				fi
			fi
			;;
		*)
			continue
	esac
done

if [ "$MODE" == "clean" ]; then
	echo "Cleaning..."
	rm -rf $AD/tmp
	rm -rf $AD/GitHub
	echo "Done, Removed $AD/tmp and $AD/GitHub folders"
	exit 0
fi

case "$VERSION" in
	"1e")
		VERSION="Experimental"
		;;
	"1s")
		VERSION="Stable"
		;;
	*)
		echo "Sorry, could not detect any valid version, exiting"
		exit 1
esac

echo ""
echo "Testing your internet connection..."
curl google.com > /dev/null 2>&1
CHECK=$?
if [ $CHECK -ne 0 ]; then
	echo "Something went wrong, test returned error code $CHECK."
	echo "Sorry but I can't let you pass, either you don't have a valid connection with the internet or required components aren't working properly"
	exit 1
else
	echo "Internet test passed successfully!"
	echo ""
fi

if [ "$MODE" == "direct" ]; then
	mkdir -p $AD/tmp
	cd $AD/tmp
	echo "CHANGELOG START"
	echo ""
	curl -kSs https://raw.github.com/Kryten2k35/UltimaROM-i9300/$VERSION/META-INF/com/google/android/aroma/changelog.txt
	echo ""
	echo ""
	echo "CHANGELOG EOF"

	if [ $NOZIP -eq 1 ]; then
		echo "Nozip detected, finishing!"
		exit 0
	fi

	echo ""
	echo "Ok, starting download from GitHub"
	echo "Warning, it may take long time. Make sure that you have stable Wi-Fi connection"
	echo ""
	TEMP=`curl -kISs https://codeload.github.com/Kryten2k35/UltimaROM-i9300/zip/$VERSION | grep "Content-Length" | awk '{print $2}'`
	if [ ! -z "$TEMP" ]; then
		TEMP=`expr $TEMP / 1048576`
		echo "It's about $TEMP Megabytes"
	else
		echo "Couldn't retrieve remote UltimaROM size, sorry"
	fi
	echo ""
	TEMP=""
	echo "Downloading right now..."
	rm -f UltimaROM_github.zip
	curl -Sk https://codeload.github.com/Kryten2k35/UltimaROM-i9300/zip/$VERSION > UltimaROM_github.zip
	echo "Download completed, it took some time..."

	if [ ! -e UltimaROM_github.zip ]; then
		echo "Couldn't find $AD/tmp/UltimaROM_github.zip, aborting"
		exit 1
	fi

	echo "Repacking downloaded UltimaROM"
	echo "Unzipping UltimaROM in GitHub version..."
	rm -rf _adflash
	mkdir _adflash

	unzip -q UltimaROM_github.zip -d _adflash
	if [ $? -ne 0 ]; then
		echo "Unzipping failed, aborting"
		exit 1
	fi

	rm -f UltimaROM_github.zip
	cd _adflash/UltimaROM-$VERSION
	if [ $? -ne 0 ]; then
		echo "Something went wrong, aborting"
		exit 1
	fi
else
	mkdir -p $AD/GitHub
	echo "CHANGELOG START"
	echo ""
	curl -kSs https://raw.github.com/Kryten2k35/UltimaROM-i9300/$VERSION/META-INF/com/google/android/aroma/changelog.txt
	echo ""
	echo ""
	echo "CHANGELOG EOF"
	echo ""
	echo "Booting pocket debian..."
	adlinux "default"
	
	echo "Setting up git repository..."
	debian "cmd" "cd $AD/GitHub && adgithub $VERSION"
	
	# Expect that repo is ready
	cd $AD/GitHub/$VERSION
	if [ $? -ne 0 ]; then
		echo "Something went wrong, aborting"
		exit 1
	fi
fi

if [ $NOZIP -eq 1 ]; then
	echo "Nozip detected, finishing!"
	exit 0
fi

URVERSION=$(cat $AD/GitHub/$VERSION/version.txt)

echo "Zipping UltimaROM into a flashable zip..."
zip -qry -1 'UltimaROM_'$URVERSION'_'$VERSION.zip . -x ".git/*" ".gitignore" "*/.gitattributes" "build.bat" "build.sh" "version.txt" "README.md"
if [ $? -ne 0 ]; then
	echo "Zipping failed, aborting"
	exit 1
fi
	
rm -f $AD/UltimaROM_*.zip
mv 'UltimaROM_'$URVERSION'_'$VERSION.zip $AD/'UltimaROM_'$URVERSION'_'$VERSION.zip
echo "Done, you can find your flashable rom in $AD"

if [ "$MODE" == "direct" ]; then
	rm -rf $AD/tmp
fi

echo ""
echo -n "Would you like to reboot to recovery now? [y/n]: "
read CHOICE
if [ "$CHOICE" == "y" ]; then
	su -c "reboot recovery" || echo "reboot recovery" | su
else
	echo "Ok, Happy Flashing!"
fi
exit 0